@page
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Localizer
@{
    ViewData["Title"] = Localizer["Index"];
}

<div class="text-center">
    <h1 class="display-4">Yuki Pastebin</h1>
    <form class="text-start" id="form">
        <div class="mb-3">
            <textarea class="form-control font-monospace" id="form-text" rows="10" placeholder="@Localizer["Paste text, images, or files, or drag and drop files here."]"></textarea>
        </div>
        <div class="mb-3 d-flex align-items-center">
            <input class="d-none" type="file" id="form-file" multiple>
            <button id="form-upload-button" type="button" class="btn btn-outline-primary flex-shrink-0" onclick="document.getElementById('form-file').click();">@Localizer["Add Files"]</button>
            <span class="ms-3">@Localizer["Files are transfered by streams. The sender cannot close or refresh this page before the file download is completed."]</span>
        </div>
        <div class="mb-3">
            <div class="list-group" id="file-list">
                <template id="file-list-item-template">
                    <div class="list-group-item list-group-item-action">
                        <div class="d-flex w-100 justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <code class="me-3">index.html</code>
                                <span class="me-3">100.23 KB</span>
                            </div>
                            <button type="button" class="btn-close"></button>
                        </div>
                    </div>
                </template>
            </div>
        </div>
        <div class="mb-3 text-center">
            <button type="submit" id="submit" class="btn btn-primary" style="width: 150px;" disabled>@Localizer["Submit"]</button>
        </div>
    </form>
    <div class="text-start" id="sync">
        <template id="sync-item-template">
            <div class="mb-3 p-3 bg-light">
                <div class="mb-2 position-relative fw-bold">
                    <span>127.0.0.1</span>
                    <time class="position-absolute position-absolute start-50 translate-middle-x">2024-10-13 22:50:13 +08:00</time>
                    <button type="button" class="btn-close position-absolute end-0"></button>
                </div>
                <div>
                    <pre class="fs-6 mb-0">hello
    world</pre>
                </div>
                <div class="list-group message-file-list">
                    <template id="message-file-list-item-template">
                        <a class="list-group-item list-group-item-action" href="javascript:;" download>
                            <div class="d-flex w-100 justify-content-between align-items-center">
                                <div class="d-flex align-items-center">
                                    <code class="me-3">index.html</code>
                                    <span class="me-3">100.23 KB</span>
                                </div>
                            </div>
                        </a>
                    </template>
                </div>
            </div>
        </template>
    </div>
    <!-- Modal -->
    <div class="modal fade" id="sender-disconnect-error-modal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header text-danger">
                    <h1 class="modal-title fs-5">@Localizer["Unable to Download File"]</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    @Localizer["The file has become invalid because the sender has gone offline."]
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">@Localizer["OK"]</button>
                </div>
            </div>
        </div>
    </div>

</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script>
        "use strict";
        let uuid = null;
        const fileDict = {};

        const connection = new signalR.HubConnectionBuilder().withUrl("/MessageHub").withAutomaticReconnect({
            nextRetryDelayInMilliseconds: retryContext => {
                return 2000;
            }
        }).build();
        connection.onreconnecting(error => {
            document.getElementById("submit").disabled = true;
            document.getElementById("submit").textContent = "@Localizer["Reconnecting"]...";
            connection.baseUrl = new URL("/MessageHub", connection.baseUrl).toString();
            if (uuid) {
                connection.baseUrl += "?uuid=" + encodeURIComponent(uuid);
            }
        });
        connection.onreconnected(connectionId => {
            document.getElementById("submit").disabled = false;
            document.getElementById("submit").textContent = "@Localizer["Submit"]";
        });
        connection.on("SetUuid", function (newUuid) {
            console.log("SetUuid", newUuid);
            uuid = newUuid;
        });
        function timeToReadable(time) {
            const regex = /^(\d+)-(\d+)-(\d+)T(\d+):(\d+):(\d+).(\d+)(.+)$/
            const matches = time.match(regex);
            return `${matches[1]}-${matches[2]}-${matches[3]} ${matches[4]}:${matches[5]}:${matches[6]} ${matches[8]}`;
        }
        connection.on("Sync", function (messages, availableMessageIds) {
            console.log(messages, availableMessageIds);
            const availableMessageIdSet = new Set(availableMessageIds);
            while (document.getElementById("sync").children.length > 1) {
                document.getElementById("sync").children[1].remove();
            }
            for (let message of messages) {
                const template = document.getElementById("sync-item-template");
                const node = document.importNode(template.content, true).children[0];
                node.getElementsByTagName("button")[0].addEventListener("click", async () => {
                    await connection.invoke("DeleteMessage", message.id);
                });
                node.getElementsByTagName("span")[0].textContent = message.ip;
                node.getElementsByTagName("time")[0].textContent = timeToReadable(message.time);
                node.getElementsByTagName("pre")[0].textContent = message.text;
                for (let file of message.files) {
                    const template = node.querySelector("#message-file-list-item-template");
                    const itemNode = document.importNode(template.content, true).children[0];

                    itemNode.getElementsByTagName("code")[0].textContent = file.name;
                    itemNode.getElementsByTagName("span")[0].textContent = numberToUnitString(file.size) + "B";
                    if (availableMessageIdSet.has(message.id)) {
                        itemNode.href = "/File/Download/" + encodeURIComponent(file.id) + "/" + encodeURIComponent(file.name);
                    }
                    else {
                        itemNode.classList.add("text-decoration-line-through");
                        // data-bs-toggle="modal" data-bs-target="#sender-disconnect-error-modal"
                        itemNode.setAttribute("data-bs-toggle", "modal");
                        itemNode.setAttribute("data-bs-target", "#sender-disconnect-error-modal");
                    }
                    node.getElementsByClassName("message-file-list")[0].appendChild(itemNode);
                }
                if (message.files.length > 0) {
                    node.getElementsByClassName("message-file-list")[0].classList.add("mt-2");
                }
                document.getElementById("sync").appendChild(node);
            }
        });
        connection.on("UploadRequest", async function (fileId, streamId) {
            console.log("UploadRequest", fileId, streamId);
            const file = fileDict[fileId];
            await fetch("/File/Upload/" + encodeURIComponent(streamId), {
                method: "POST",
                body: file,
            });
        });

        function numberToUnitString(number) {
            const units = ["", "K", "M", "G", "T", "P", "E", "Z", "Y"];
            let i;
            for (i = 0; i < units.length - 1; i++) {
                if (number < 1024) {
                    break;
                }
                number /= 1024;
            }
            return number.toFixed(2) + " " + units[i];
        }
        function addFile(file) {
            const template = document.getElementById("file-list-item-template");
            const node = document.importNode(template.content, true).children[0];
            node.getElementsByTagName("code")[0].textContent = file.name;
            node.getElementsByTagName("span")[0].textContent = numberToUnitString(file.size) + "B";
            node.getElementsByTagName("button")[0].onclick = () => { node.remove(); };
            node.classList.add("file-list-item");
            node.file = file;
            document.getElementById("file-list").appendChild(node);
        }
        document.getElementById("form-file").addEventListener("change", function (ev) {
            for (let file of this.files) {
                addFile(file);
            }
        });
        document.getElementById("form").addEventListener("submit", async function (ev) {
            ev.preventDefault();
            document.getElementById("submit").disabled = true;
            document.getElementById("submit").textContent = "@Localizer["Submitting"]...";
            const message = {
                text: document.getElementById("form-text").value,
                files: []
            };
            for (let item of document.getElementById("file-list").getElementsByClassName("file-list-item")) {
                message.files.push({ name: item.file.name, size: item.file.size });
            }
            connection.off("CreateFileIds");
            connection.on("CreateFileIds", function (files) {
                console.assert(files.length === document.getElementById("file-list").getElementsByClassName("file-list-item").length);
                let i = 0;
                for (let item of document.getElementById("file-list").getElementsByClassName("file-list-item")) {
                    fileDict[files[i].id] = item.file;
                    i++;
                }
                console.log(fileDict);
                connection.off("CreateFileIds");
            });
            await connection.invoke("SendMessage", message.text, message.files);
            document.getElementById("submit").textContent = "@Localizer["Submitted"]";
            document.getElementById("form-text").value = "";
            const fileList = document.getElementById("file-list");
            while (fileList.children.length > 1) {
                fileList.children[1].remove();
            }
            setTimeout(() => {
                document.getElementById("submit").textContent = "@Localizer["Submit"]";
                document.getElementById("submit").disabled = false;
            }, 1000);
        });
        document.getElementById("form-text").addEventListener("paste", (ev) => {
            for (let item of ev.clipboardData.items) {
                console.log(item);
                if (item.kind === "file") {
                    addFile(item.getAsFile());
                }
            }
        });
        document.getElementById("form-text").addEventListener("drop", (ev) => {
            ev.preventDefault();
            for (let item of ev.dataTransfer.items) {
                console.log(item);
                if (item.kind === "file") {
                    addFile(item.getAsFile());
                }
            }
        });
        document.getElementById("form-text").addEventListener("dragover", (ev) => {
            ev.preventDefault();
        });

        connection.start().then(function () {
            document.getElementById("submit").disabled = false;
        }).catch(function (err) {
            return console.error(err.toString());
        });
    </script>
}